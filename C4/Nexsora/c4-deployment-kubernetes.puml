@startuml C4-Deployment-Kubernetes
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

title Diagrama de Deployment - Kubernetes

Deployment_Node(k8s_cluster, "Kubernetes Cluster", "EKS/GKE/AKS") {
    
    Deployment_Node(frontend_ns, "Frontend Namespace") {
        Deployment_Node(react_pods, "React App Pods", "3 replicas") {
            Container(react_app, "React App", "Node.js + Nginx", "Interface web responsiva")
        }
        Deployment_Node(gateway_pods, "API Gateway Pods", "2 replicas") {
            Container(api_gateway, "Kong Gateway", "Kong + Postgres", "API Gateway com rate limiting")
        }
    }
    
    Deployment_Node(mcp_ns, "MCP Gateway Namespace") {
        Deployment_Node(docker_mcp_pods, "Docker MCP Gateway Pods", "2 replicas") {
            Container(docker_mcp, "Docker MCP Gateway", "Docker MCP Server", "Centralizador de credenciais e controlador de tools")
        }
        Deployment_Node(mcp_storage, "MCP Persistent Storage", "PVC") {
            ContainerDb(credentials_vault, "Credentials Vault", "Encrypted Storage", "Armazenamento seguro de credenciais")
        }
    }
    
    Deployment_Node(ai_ns, "AI Services Namespace") {
        Deployment_Node(ingestion_pods, "Data Ingestion Pods", "3 replicas") {
            Container(data_ingestion, "Entrada no Sistema", "Python + FastAPI", "Recebe e processa dados de sensores")
        }
        Deployment_Node(agents_pods, "AI Agents Pods", "4 replicas") {
            Container(ai_agents, "LangChain Agents", "Python + LangChain", "Pipeline de agentes especializados")
        }
        Deployment_Node(rag_pods, "RAG Service Pods", "2 replicas") {
            Container(rag_service, "RAG Service", "Python + LangChain", "Retrieval-Augmented Generation")
        }
    }
    
    Deployment_Node(data_ns, "Data Services Namespace") {
        Deployment_Node(postgres_sts, "PostgreSQL StatefulSet", "1 primary + 2 replicas") {
            ContainerDb(postgres, "PostgreSQL", "PostgreSQL 15", "Dados operacionais")
        }
        Deployment_Node(timeseries_sts, "TimeSeries DB StatefulSet", "1 primary + 2 replicas") {
            ContainerDb(timeseries_db, "InfluxDB/TimescaleDB", "Time Series Database", "Histórico de dados de sensores")
        }
        Deployment_Node(redis_sts, "Redis StatefulSet", "1 primary + 2 replicas") {
            ContainerDb(redis, "Redis Cluster", "Redis 7", "Cache distribuído")
        }
        Deployment_Node(rabbitmq_sts, "RabbitMQ StatefulSet", "3 nodes cluster") {
            Container(rabbitmq, "RabbitMQ Cluster", "RabbitMQ 3.12", "Message broker HA")
        }
    }
    
    Deployment_Node(monitoring_ns, "Monitoring Namespace") {
        Deployment_Node(prometheus_pods, "Prometheus Pods", "1 replica") {
            Container(prometheus, "Prometheus", "Prometheus + Grafana", "Métricas e alertas")
        }
        Deployment_Node(jaeger_pods, "Jaeger Pods", "1 replica") {
            Container(jaeger, "Jaeger", "Jaeger All-in-One", "Distributed tracing")
        }
    }
}

Deployment_Node(external_services, "Serviços Externos") {
    ContainerDb(pinecone, "Pinecone", "Pinecone Cloud", "Vector database gerenciado")
    System_Ext(erp_systems, "Sistemas ERP", "SAP/Oracle on-premise")
    System_Ext(iot_sensors, "Sensores IoT", "Dispositivos de campo")
    System_Ext(notification_services, "Serviços de Notificação", "WhatsApp/Email/SMS APIs")
}

' Ingress e Load Balancing
Deployment_Node(ingress, "Ingress Controller", "Nginx/Traefik") {
    Container(load_balancer, "Load Balancer", "Cloud LB", "Distribuição de tráfego")
}

' Relacionamentos
Rel(load_balancer, react_app, "Route /app/*", "HTTPS")
Rel(load_balancer, api_gateway, "Route /api/*", "HTTPS")
Rel(api_gateway, data_ingestion, "Sensor data", "HTTP")

' Pipeline de dados
Rel(iot_sensors, data_ingestion, "Telemetria IoT", "MQTT/HTTP")
Rel(data_ingestion, timeseries_db, "Dados tratados", "Line Protocol/SQL")
Rel(data_ingestion, rabbitmq, "Event publishing", "AMQP")

' AI Pipeline
Rel(rabbitmq, ai_agents, "Event consumption", "AMQP")
Rel(ai_agents, timeseries_db, "Query historical data", "InfluxQL/SQL")
Rel(ai_agents, rag_service, "Knowledge queries", "HTTP")
Rel(ai_agents, postgres, "Equipment data", "SQL")

' MCP Gateway Security Layer
Rel(ai_agents, docker_mcp, "External tools via MCP", "MCP Protocol")
Rel(docker_mcp, credentials_vault, "Secure credential storage", "Encrypted")
Rel(docker_mcp, erp_systems, "Controlled ERP integration", "REST/SOAP via MCP")
Rel(docker_mcp, pinecone, "Controlled vector search", "REST API via MCP")
Rel(docker_mcp, notification_services, "Controlled notifications", "Webhooks via MCP")

' Monitoring
Rel(prometheus, ai_agents, "Scrape metrics", "HTTP")
Rel(prometheus, data_ingestion, "Scrape metrics", "HTTP")
Rel(prometheus, docker_mcp, "Scrape MCP metrics", "HTTP")
Rel(prometheus, timeseries_db, "Scrape DB metrics", "HTTP")
Rel(jaeger, ai_agents, "Collect traces", "OpenTelemetry")
Rel(jaeger, docker_mcp, "Collect MCP traces", "OpenTelemetry")

note as timeseries_deployment
TimeSeries Database Deployment:
- StatefulSet para persistência de dados
- Volumes persistentes com backup automático
- Replicação para alta disponibilidade
- Retention policies configuráveis
- Continuous queries para agregações
- Grafana integration para dashboards
end note

note as data_pipeline_note
Pipeline de Dados IoT:
- Ingestion pods com autoscaling
- Buffer em RabbitMQ para picos de dados
- TimeSeries DB otimizado para write-heavy
- Compressão automática de dados antigos
- Índices otimizados para queries analíticas
- Backup incremental para disaster recovery
end note

note as mcp_security
Docker MCP Gateway Security:
- Kubernetes ServiceAccount RBAC
- Encrypted secrets via K8s Secrets
- Network policies para isolamento
- Pod Security Standards (PSS)
- Audit logging para compliance
- Credential rotation automática
end note

note as k8s_features
Kubernetes Features:
- HPA (Horizontal Pod Autoscaler)
- VPA (Vertical Pod Autoscaler)
- Network Policies para segurança
- RBAC para controle de acesso
- Secrets para credenciais MCP
- ConfigMaps para configurações
- Persistent Volumes para dados
- Service Mesh (Istio) para mTLS
end note

SHOW_LEGEND()
@enduml