@startuml C2-Containers-Nexora
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Diagrama de Containers - Plataforma SaaS Nexora com Dados Vetorizados para RAG

Person(usuario, "Usu√°rio", "T√©cnicos de manuten√ß√£o, gestores de ativos e operadores")
Person(admin, "Admin/Configurador", "Configura triggers de an√°lise preditiva")
Person(gestor_ativos, "Gestor de Ativos", "Cadastra equipamentos, sensores e manuais")

System_Boundary(nexora_boundary, "Plataforma SaaS Nexora") {
    Container(web_app, "Aplica√ß√£o Web", "React + TypeScript", "Interface de usu√°rio para monitoramento, dashboards e configura√ß√£o de triggers")
    Container(api_gateway, "API Gateway", "Kong/Nginx", "Ponto de entrada unificado, autentica√ß√£o e roteamento de requisi√ß√µes")
    
    ' === GEST√ÉO DE DADOS MESTRE ===
    Container(equipment_service, "Equipment Management Service", "Python + FastAPI", "CRUD de equipamentos, hierarquia e classifica√ß√£o")
    Container(sensor_service, "Sensor Management Service", "Python + FastAPI", "CRUD de sensores, tipos e especifica√ß√µes")
    Container(manual_service, "Manual & Documentation Service", "Python + FastAPI", "CRUD de manuais, procedimentos e FMEA")
    Container(maintenance_history_service, "Maintenance History Service", "Python + FastAPI", "Hist√≥rico completo de manuten√ß√µes e falhas")
    
    ' === PROCESSAMENTO PARA RAG ===
    Container(document_processor, "Document Processor", "Python + LangChain", "Processa documentos e gera embeddings para RAG")
    Container(vector_indexer, "Vector Indexer", "Python + LangChain", "Indexa e gerencia embeddings no banco vetorizado")
    
    ' === PIPELINE OPERACIONAL ===
    Container(data_ingestion, "Entrada no Sistema", "Python/FastAPI", "Recebe e processa dados de sensores IoT")
    Container(observer, "Observador", "Python", "Observa mudan√ßas e emite eventos para coordena√ß√£o")
    Container(event_queue, "Fila de Eventos", "RabbitMQ", "Hub central de coordena√ß√£o entre agentes AI")
    
    Container(trigger_manager, "Trigger Manager", "Python + Celery", "Gerencia triggers configur√°veis para an√°lise preditiva")
    
    ' === AGENTES AI ===
    Container(anomaly_agent, "Agent Detec√ß√£o Anomalias", "Python + LangChain", "Detecta padr√µes an√¥malos em dados de sensores")
    Container(predictive_agent, "Agent An√°lise Preditiva", "Python + LangChain", "Prediz falhas (acionado sob demanda via triggers)")
    Container(maintenance_agent, "Agent Necessidades Manuten√ß√£o", "Python + LangChain", "Identifica necessidades de manuten√ß√£o")
    Container(workorder_agent, "Agent Emiss√£o OS", "Python + LangChain", "Gera ordens de servi√ßo priorizadas")
    
    ' === RAG E TOOLS ===
    Container(rag_service, "RAG Service", "Python + LangChain", "Retrieval-Augmented Generation usando dados vetorizados")
    Container(internal_tools, "Tools Internas", "Python", "Ferramentas que n√£o acessam sistemas externos")
    Container(docker_mcp_gateway, "Docker MCP Gateway", "Docker MCP Server", "Controla ferramentas que acessam sistemas externos")
    
    Container(monitoring, "Observabilidade", "Prometheus/Grafana/Jaeger", "Coleta de m√©tricas, logs e traces distribu√≠dos")
}

' === BANCOS DE DADOS SEPARADOS POR TIPO ===
ContainerDb(postgres, "PostgreSQL", "PostgreSQL 15", "Dados estruturados: equipamentos, sensores, configura√ß√µes, hist√≥rico de manuten√ß√µes")
ContainerDb(timeseries_db, "InfluxDB/TimescaleDB", "Time Series Database", "Dados temporais: hist√≥rico de sensores IoT")
ContainerDb(vector_db, "Pinecone Vector DB", "Pinecone Cloud", "Dados vetorizados: embeddings de manuais, FMEA, procedimentos, casos hist√≥ricos")
ContainerDb(file_storage, "MinIO/S3", "Object Storage", "Arquivos originais: PDFs, imagens, documentos t√©cnicos")
ContainerDb(cache, "Redis", "Redis Cluster", "Cache de sess√µes e consultas frequentes")

System_Ext(sensores, "Sensores IoT", "Dispositivos de monitoramento")
System_Ext(erp, "Sistemas ERP", "SAP, Oracle, outros ERPs")
System_Ext(notificacoes, "Servi√ßos de Notifica√ß√£o", "WhatsApp, Email, SMS")

' === FLUXOS DE GEST√ÉO DE DADOS MESTRE ===
Rel(gestor_ativos, web_app, "Cadastra dados mestre", "HTTPS")
Rel(web_app, api_gateway, "CRUD operations", "HTTPS")
Rel(api_gateway, equipment_service, "Equipment CRUD", "HTTP")
Rel(api_gateway, sensor_service, "Sensor CRUD", "HTTP")
Rel(api_gateway, manual_service, "Manual CRUD", "HTTP")
Rel(api_gateway, maintenance_history_service, "History CRUD", "HTTP")

' === PERSIST√äNCIA DE DADOS ESTRUTURADOS ===
Rel(equipment_service, postgres, "Equipment data", "SQL")
Rel(sensor_service, postgres, "Sensor data", "SQL")
Rel(manual_service, postgres, "Manual metadata", "SQL")
Rel(maintenance_history_service, postgres, "History data", "SQL")

' === ARMAZENAMENTO DE ARQUIVOS ===
Rel(manual_service, file_storage, "Store PDFs/Documents", "S3 API")

' === PROCESSAMENTO PARA VETORIZA√á√ÉO ===
Rel(manual_service, document_processor, "Process new documents", "HTTP")
Rel(maintenance_history_service, document_processor, "Process maintenance cases", "HTTP")
Rel(document_processor, file_storage, "Read original files", "S3 API")
Rel(document_processor, postgres, "Read metadata", "SQL")
Rel(document_processor, vector_indexer, "Send processed content", "HTTP")
Rel(vector_indexer, vector_db, "Store embeddings", "Pinecone API")

' === FLUXO OPERACIONAL ===
Rel(sensores, data_ingestion, "Envia telemetria", "MQTT/HTTP")
Rel(data_ingestion, sensor_service, "Valida sensor registration", "HTTP")
Rel(data_ingestion, timeseries_db, "Store sensor data", "InfluxDB Protocol")
Rel(data_ingestion, observer, "Dados processados", "HTTP")
Rel(observer, event_queue, "Emite eventos", "AMQP")

' === TRIGGER LOGIC ===
Rel(admin, web_app, "Configura triggers", "HTTPS")
Rel(api_gateway, trigger_manager, "Trigger config", "HTTP")
Rel(trigger_manager, postgres, "Store trigger config", "SQL")
Rel(event_queue, trigger_manager, "Monitor data", "AMQP")
Rel(trigger_manager, timeseries_db, "Evaluate thresholds", "InfluxQL")
Rel(trigger_manager, event_queue, "Trigger predictive analysis", "AMQP")

' === PIPELINE DE AGENTES COM DADOS CONTEXTUALIZADOS ===
Rel(event_queue, anomaly_agent, "Sensor data events", "AMQP")
Rel(anomaly_agent, timeseries_db, "Query historical data", "InfluxQL")
Rel(anomaly_agent, equipment_service, "Equipment context", "HTTP")
Rel(anomaly_agent, sensor_service, "Sensor specs", "HTTP")

Rel(event_queue, predictive_agent, "Trigger events", "AMQP")
Rel(predictive_agent, timeseries_db, "Time series analysis", "InfluxQL")
Rel(predictive_agent, maintenance_history_service, "Historical patterns", "HTTP")
Rel(predictive_agent, equipment_service, "Equipment specs", "HTTP")

Rel(event_queue, maintenance_agent, "Prediction events", "AMQP")
Rel(maintenance_agent, rag_service, "Query knowledge base", "HTTP")
Rel(maintenance_agent, equipment_service, "Equipment details", "HTTP")
Rel(maintenance_agent, maintenance_history_service, "Similar cases", "HTTP")

Rel(event_queue, workorder_agent, "Maintenance events", "AMQP")
Rel(workorder_agent, equipment_service, "Equipment hierarchy", "HTTP")
Rel(workorder_agent, maintenance_history_service, "Log maintenance", "HTTP")

' === RAG SERVICE COM DADOS VETORIZADOS ===
Rel(rag_service, vector_db, "Vector similarity search", "Pinecone API")
Rel(rag_service, postgres, "Metadata enrichment", "SQL")
Rel(rag_service, cache, "Cache frequent queries", "Redis")

' === AGENTES AI ACESSANDO RAG ===
Rel(anomaly_agent, rag_service, "Query sensor knowledge", "HTTP")
Rel(predictive_agent, rag_service, "Query maintenance patterns", "HTTP")

' === TOOLS E INTEGRA√á√ïES ===
Rel(workorder_agent, internal_tools, "Internal tools", "HTTP")
Rel(workorder_agent, docker_mcp_gateway, "External tools", "MCP Protocol")
Rel(docker_mcp_gateway, erp, "ERP integration", "REST/SOAP")
Rel(docker_mcp_gateway, notificacoes, "Notifications", "REST API")

' === INTERFACE USU√ÅRIO ===
Rel(usuario, web_app, "Access dashboards", "HTTPS")
Rel(api_gateway, postgres, "Query operational data", "SQL")
Rel(api_gateway, timeseries_db, "Query metrics", "InfluxQL")
Rel(api_gateway, cache, "Cache responses", "Redis")

' === MONITORAMENTO ===
Rel(monitoring, event_queue, "Monitor events", "HTTP")
Rel(monitoring, timeseries_db, "Collect metrics", "InfluxQL")
Rel(monitoring, vector_db, "Monitor vector operations", "HTTP")

note as data_separation_note
Separa√ß√£o Clara de Dados por Tipo:

üìä POSTGRESQL (Dados Estruturados):
- Equipamentos e hierarquia
- Sensores e especifica√ß√µes  
- Metadados de manuais e documentos
- Configura√ß√µes de triggers
- Hist√≥rico de manuten√ß√µes estruturado

‚è±Ô∏è INFLUXDB (Dados Temporais):
- Telemetria de sensores IoT
- S√©ries temporais para an√°lise
- M√©tricas de performance
- Dados agregados para ML

üß† PINECONE (Dados Vetorizados):
- Embeddings de manuais t√©cnicos
- Procedimentos de manuten√ß√£o
- An√°lises FMEA vetorizadas
- Casos hist√≥ricos de manuten√ß√£o
- Knowledge base para RAG

üíæ MINIO/S3 (Arquivos Originais):
- PDFs de manuais
- Imagens t√©cnicas
- Documentos de FMEA
- Backup de arquivos processados
end note

note as vector_processing_note
Processamento para Vetoriza√ß√£o:

üîÑ PIPELINE AUTOM√ÅTICO:
- Upload de documento ‚Üí MinIO/S3
- Metadata ‚Üí PostgreSQL
- Processamento ‚Üí Document Processor
- OCR + NLP ‚Üí Extra√ß√£o de conte√∫do
- Embedding ‚Üí SentenceTransformers
- Indexa√ß√£o ‚Üí Pinecone Vector DB

üéØ TIPOS DE CONTE√öDO VETORIZADO:
- Manuais de equipamentos
- Procedimentos de manuten√ß√£o
- An√°lises FMEA completas
- Casos hist√≥ricos de falhas
- Recomenda√ß√µes de especialistas
- Troubleshooting guides
end note

note as rag_optimization_note
RAG Otimizado com Dados Vetorizados:

üîç BUSCA CONTEXTUAL:
- Similarity search por equipamento
- Filtragem por tipo de falha
- Ranking por relev√¢ncia hist√≥rica
- Multi-modal search (texto + metadata)

‚ö° PERFORMANCE:
- Cache de embeddings frequentes
- √çndices otimizados no Pinecone
- Queries paralelas para m√∫ltiplas fontes
- Response time < 2s para consultas RAG
end note

SHOW_LEGEND()
@enduml